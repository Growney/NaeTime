@using NaeTime.Client.Razor.Lib.Abstractions
@page "/flyingsession/update/{flyingsessionid:guid}"
@layout WithReturn
@if (_model != null)
{
    <EditableFlyingSessionDetails Details=_model Tracks=_tracks OnValidSubmit="HandleValidSubmit"></EditableFlyingSessionDetails>
}


@code {
    [Inject]
    private IFlyingSessionApiClient FlyingSession { get; set; } = null!;
    [Inject]
    private ITrackApiClient TrackApiClient { get; set; } = null!;
    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    [Parameter]
    public Guid FlyingSessionId { get; set; }

    [Parameter]
    public string? ReturnUrl { get; set; }

    private FlyingSession? _model = new(Guid.NewGuid(),string.Empty,DateTime.Now,DateTime.Now.AddDays(1),null);
    private readonly List<Track> _tracks = new();

    protected override async Task OnInitializedAsync()
    {
        var tracks = await TrackApiClient.GetAllAsync();

        _tracks.AddRange(tracks);

        _model = await FlyingSession.GetAsync(FlyingSessionId);

        await base.OnInitializedAsync();
    }

    private async Task HandleValidSubmit(FlyingSession flyingSession)
    {
        if (string.IsNullOrWhiteSpace(flyingSession.Description))
        {
            return;
        }

        await FlyingSession.UpdateAsync(flyingSession);

        NavigationManager.NavigateTo(ReturnUrl ?? "/flyingsession/list");
    }
}