<Microsoft.AspNetCore.Components.Forms.EditForm EditContext="_editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div>

        <label>Description</label>
        <div>

            <Microsoft.AspNetCore.Components.Forms.InputText @bind-Value="Details.Description" />
            <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(() => Details.Description)" />
        </div>
    </div>
    <div class="mt-2">
        <label>Start</label>
        <div>
            <Microsoft.AspNetCore.Components.Forms.InputDate @bind-Value="Details.Start" />
            <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(() => Details.Start)" />
        </div>
    </div>
    <div class="mt-2">
        <label>Expected End</label>
        <div>
            <Microsoft.AspNetCore.Components.Forms.InputDate @bind-Value="Details.ExpectedEnd" />
            <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(() => Details.ExpectedEnd)" />
        </div>
    </div>
    <div class="mt-2">
        <label>Track</label>
        <div>
            <InputSelect @bind-Value="_selectedTrackId">
                @foreach(var track in Tracks)
                {
                    <option value="@track.Id">@track.Name</option>
                })
            </InputSelect>
            <Microsoft.AspNetCore.Components.Forms.ValidationMessage For="@(() => Details.ExpectedEnd)" />
        </div>
    </div>
    <div class="mt-3">
        <button type="submit" class="btn btn-primary">Save</button>
    </div>

</Microsoft.AspNetCore.Components.Forms.EditForm>

@code {
    [Parameter]
    [EditorRequired]
    public Func<FlyingSession, Task> OnValidSubmit { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public FlyingSession Details { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public IEnumerable<Track> Tracks { get; set; } = Enumerable.Empty<Track>();

    private EditContext? _editContext;
    private Guid _selectedTrackId;

    protected override void OnParametersSet()
    {
        _editContext = new EditContext(Details);

        if(Details.TrackId != null)
        {
            _selectedTrackId = Details.TrackId.Value;
        }

        base.OnParametersSet();
    }

    private Task HandleValidSubmit()
    {
        var selectedTrack = Tracks.FirstOrDefault(t => t.Id == _selectedTrackId);

        if(selectedTrack == null)
        {
            return Task.CompletedTask;
        }

        Details.TrackId = _selectedTrackId;

        return OnValidSubmit?.Invoke(Details) ?? Task.CompletedTask;
    }
}