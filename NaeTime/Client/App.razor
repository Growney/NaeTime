@using NaeTime.Client.Abstractions.Services
@implements IAsyncDisposable
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (context.User.Identity?.IsAuthenticated != true)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p role="alert">You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code{
    [Inject]
    public ICommunicationService? CommunicationService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (CommunicationService != null)
        {
            await CommunicationService.StartAsync();
        }

        await base.OnInitializedAsync();
    }

    public ValueTask DisposeAsync()
    {
        if (CommunicationService != null)
        {
            return new ValueTask(CommunicationService.StopAsync());
        }
        else
        {
            return ValueTask.CompletedTask;
        }
    }
}