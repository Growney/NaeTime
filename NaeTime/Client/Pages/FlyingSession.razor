@page "/flyingsession/{id:guid}"
@using NaeTime.Client.Abstractions.Models
@using NaeTime.Client.Abstractions.Services

@if(_dto == null)
{
    <h3>Getting session</h3>
}
else
{
    <h3>@_dto.Name</h3>
    <div>
        <div>
            Started: @_dto.Start
        </div>
    </div>
    <h5>Flights</h5>
    <div>
        New Flight:
        <div>
            Frequency: <input type="number" @bind="_newFlightFrequency">
        </div>
        <div>
            <button @onclick="StartFlight">Start</button>
        </div>
    </div>
    <div>
        <table>
            <tr>
                <th>
                    PilotId
                </th>
                <th>
                    Started
                </th>
                <th>
                    Finished
                </th>
                <th>
                    Frequency
                </th>
                <th>

                </th>
            </tr>
            @foreach (var flight in _dto.Flights)
            {
                <tr>
                    <td>
                        @flight.PilotId
                    </td>
                    <td>
                        @flight.Start
                    </td>
                    <td>
                        @flight.End
                    </td>
                    <td>
                        @flight.Frequency
                    </td>
                    <td>
                        @if(flight.End == null)
                        {
                            <button @onclick="()=>FinishFlight(flight.Id)">Finish</button>
                        }
                        <button @onclick="()=>RecalculateFlight(flight.Id)">Recalculate</button>
                    </td>
                </tr>
            }
        </table>
    </div>
    <h5>Laps</h5>
    <div>
        <table>
            <tr>
                <th>
                    Pilot
                </th>
                <th>
                    Time
                </th>
            </tr>
            @foreach(var lap in _dto.Laps)
            {
                <tr>
                    <td>
                        @(lap.Pilot?.Name ?? "Unknown")
                    </td>
                    @if (lap.EndTick != null)
                    {
                        <td>
                            @TimeSpan.FromMilliseconds((double)(lap.EndTick - lap.StartTick)).TotalSeconds
                        </td>
                    }
                    else{
                        <td>
                            In Progress
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
}

@code
{
    [Parameter]
    public Guid Id { get; set; }
    [Inject]
    public HttpClient? Client { get; set; }
    [Inject]
    public ICommunicationService? CommunicationService { get; set; }
    private FlyingSessionDto? _dto;

    private int _newFlightFrequency;

    protected override async Task OnInitializedAsync()
    {
        if(Client != null)
        {
            _dto = await Client.GetFromJsonAsync<FlyingSessionDto>($"/session/{Id}");
        }
        if(CommunicationService != null)
        {
            CommunicationService.OnLapStarted += OnLapStarted;
        }
        await base.OnInitializedAsync();
    }

    private void OnLapStarted(object? sender,FlightLapDtoEventArgs args)
    {
        if(_dto != null)
        {
            if (!_dto.Laps.Any(x => x.Id == args.Lap.Id))
            {
                _dto.Laps.Add(args.Lap);
            }
        }
    }
    private void OnLapCompleted(object? sender, FlightLapDtoEventArgs args)
    {
        if (_dto != null)
        {
            var lap = _dto.Laps.FirstOrDefault(x => x.Id == args.Lap.Id);
            if(lap != null)
            {
                lap.EndTick = args.Lap.EndTick;
            }
            else
            {
                _dto.Laps.Add(args.Lap);
            }
        }
    }

    private async Task FinishFlight(Guid flightId){
        if (Client != null)
        {
            var response = await Client.PostAsync($"session/flight/{flightId}/stop", null);
            if (response.IsSuccessStatusCode)
            {
                var flight = _dto?.Flights.FirstOrDefault(x => x.Id == flightId);
                if(flight != null)
                {
                    flight.End = DateTime.Now;
                }
            }
        }
    }
    private async Task RecalculateFlight(Guid flightId)
    {
        if (Client != null)
        {
            var response = await Client.PostAsync($"session/flight/{flightId}/recalculate", null);
            if (response.IsSuccessStatusCode)
            {
            }
        }
    }
    private async Task StartFlight()
    {
        if(_dto != null && Client != null)
        {
            var response = await Client.PostAsync($"session/{_dto.Id}/flight/start?frequency={_newFlightFrequency}",null);
            if(response.IsSuccessStatusCode)
            {
                var flight = await response.Content.ReadFromJsonAsync<FlightDto>();
                if(flight != null)
                {
                    _dto.Flights.Add(flight);
                }
            }
        }
    }
}