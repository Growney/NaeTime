// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NaeTime.OpenPractice.SQLite;

#nullable disable

namespace NaeTime.OpenPractice.SQLite.Migrations
{
    [DbContext(typeof(OpenPracticeDbContext))]
    [Migration("20240311151743_consecutiveleaderboard")]
    partial class consecutiveleaderboard
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.ConsecutiveLapLeaderboardPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint>("LapCap")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLapCompletionUtc")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PilotId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Position")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<uint>("TotalLaps")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalMilliseconds")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ConsecutiveLapLeaderboardPositions");
                });

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.ConsecutiveLapRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint>("LapCap")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLapCompletionUtc")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PilotId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<uint>("TotalLaps")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalMilliseconds")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ConsecutiveLapRecords");
                });

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.OpenPracticeLap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FinishedUtc")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PilotId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalMilliseconds")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("OpenPracticeLaps");
                });

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.OpenPracticeSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long?>("MaximumLapMilliseconds")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MinimumLapMilliseconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OpenPracticeSessions");
                });

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.ConsecutiveLapLeaderboardPosition", b =>
                {
                    b.OwnsMany("NaeTime.OpenPractice.SQLite.Models.IncludedLap", "IncludedLaps", b1 =>
                        {
                            b1.Property<Guid>("ConsecutiveLapLeaderboardPositionId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("LapId")
                                .HasColumnType("TEXT");

                            b1.HasKey("ConsecutiveLapLeaderboardPositionId", "Id");

                            b1.ToTable("ConsecutiveLapLeaderboardPositions_IncludedLaps");

                            b1.WithOwner()
                                .HasForeignKey("ConsecutiveLapLeaderboardPositionId");
                        });

                    b.Navigation("IncludedLaps");
                });

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.ConsecutiveLapRecord", b =>
                {
                    b.OwnsMany("NaeTime.OpenPractice.SQLite.Models.IncludedLap", "IncludedLaps", b1 =>
                        {
                            b1.Property<Guid>("ConsecutiveLapRecordId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("LapId")
                                .HasColumnType("TEXT");

                            b1.HasKey("ConsecutiveLapRecordId", "Id");

                            b1.ToTable("ConsecutiveLapRecords_IncludedLaps");

                            b1.WithOwner()
                                .HasForeignKey("ConsecutiveLapRecordId");
                        });

                    b.Navigation("IncludedLaps");
                });

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.OpenPracticeSession", b =>
                {
                    b.OwnsMany("NaeTime.OpenPractice.SQLite.Models.PilotLane", "ActiveLanes", b1 =>
                        {
                            b1.Property<Guid>("OpenPracticeSessionId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.Property<byte>("Lane")
                                .HasColumnType("INTEGER");

                            b1.Property<Guid>("PilotId")
                                .HasColumnType("TEXT");

                            b1.HasKey("OpenPracticeSessionId", "Id");

                            b1.ToTable("PilotLane");

                            b1.WithOwner()
                                .HasForeignKey("OpenPracticeSessionId");
                        });

                    b.OwnsMany("NaeTime.OpenPractice.SQLite.Models.TrackedConsecutiveLaps", "TrackedConsecutiveLaps", b1 =>
                        {
                            b1.Property<Guid>("OpenPracticeSessionId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT");

                            b1.Property<uint>("LapCap")
                                .HasColumnType("INTEGER");

                            b1.HasKey("OpenPracticeSessionId", "Id");

                            b1.ToTable("TrackedConsecutiveLaps");

                            b1.WithOwner()
                                .HasForeignKey("OpenPracticeSessionId");
                        });

                    b.Navigation("ActiveLanes");

                    b.Navigation("TrackedConsecutiveLaps");
                });
#pragma warning restore 612, 618
        }
    }
}
