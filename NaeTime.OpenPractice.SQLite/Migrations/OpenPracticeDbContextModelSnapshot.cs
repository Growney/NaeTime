// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NaeTime.OpenPractice.SQLite;

#nullable disable

namespace NaeTime.OpenPractice.SQLite.Migrations
{
    [DbContext(typeof(OpenPracticeDbContext))]
    partial class OpenPracticeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.ConsecutiveLapRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint>("LapCap")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLapCompletionUtc")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PilotId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<uint>("TotalLaps")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalMilliseconds")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ConsecutiveLapRecords");
                });

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.IncludedLap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ConsecutiveLapRecordId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LapId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConsecutiveLapRecordId");

                    b.ToTable("IncludedLap");
                });

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.OpenPracticeLap", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FinishedUtc")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PilotId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedUtc")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TotalMilliseconds")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("OpenPracticeLaps");
                });

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.OpenPracticeSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long?>("MaximumLapMilliseconds")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MinimumLapMilliseconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TrackId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("OpenPracticeSessions");
                });

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.PilotLane", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte>("Lane")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("OpenPracticeSessionId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PilotId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OpenPracticeSessionId");

                    b.ToTable("PilotLane");
                });

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.TrackedConsecutiveLaps", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<uint>("LapCap")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("OpenPracticeSessionId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OpenPracticeSessionId");

                    b.ToTable("TrackedConsecutiveLaps");
                });

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.IncludedLap", b =>
                {
                    b.HasOne("NaeTime.OpenPractice.SQLite.Models.ConsecutiveLapRecord", null)
                        .WithMany("IncludedLaps")
                        .HasForeignKey("ConsecutiveLapRecordId");
                });

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.PilotLane", b =>
                {
                    b.HasOne("NaeTime.OpenPractice.SQLite.Models.OpenPracticeSession", null)
                        .WithMany("ActiveLanes")
                        .HasForeignKey("OpenPracticeSessionId");
                });

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.TrackedConsecutiveLaps", b =>
                {
                    b.HasOne("NaeTime.OpenPractice.SQLite.Models.OpenPracticeSession", null)
                        .WithMany("TrackedConsecutiveLaps")
                        .HasForeignKey("OpenPracticeSessionId");
                });

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.ConsecutiveLapRecord", b =>
                {
                    b.Navigation("IncludedLaps");
                });

            modelBuilder.Entity("NaeTime.OpenPractice.SQLite.Models.OpenPracticeSession", b =>
                {
                    b.Navigation("ActiveLanes");

                    b.Navigation("TrackedConsecutiveLaps");
                });
#pragma warning restore 612, 618
        }
    }
}
